---
import { getSession } from "auth-astro/server";
import Spotify from "@lib/spotify.js";

import Layout from "@layouts/Layout.astro";

export const prerender = false;

const session = await getSession(Astro.request);
if (!session?.user) {
  return Astro.redirect("/");
}
---

<Layout>
  <div id="container" class="min-h-screen grid place-items-center">
    <main class="">
      <section
        id="hero"
        class="pt-12 md:pt-0 block md:flex md:flex-col md:justify-center md:items-start p-4"
      >
        <h1 class="my-4 text-xl leading-6">Download Page</h1>
      </section>

      <form onsubmit="event.preventDefault(); searchPlaylists(event);">
        <fieldset
          class="fieldset bg-base-200 border-base-300 rounded-box w-xs border p-4"
        >
          <legend class="fieldset-legend">Search Playlist Rankings</legend>

          <label class="input">
            <svg
              class="h-[1em] opacity-50"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <g
                stroke-linejoin="round"
                stroke-linecap="round"
                stroke-width="2.5"
                fill="none"
                stroke="currentColor"
              >
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.3-4.3"></path>
              </g>
            </svg>
            <input
              type="search"
              class="grow"
              name="keyword"
              placeholder="Keyword"
            />
          </label>

          <div class="">
            {
              Object.entries(Spotify.MARKETS).map(([market, value]) => (
                <input
                  class="m-0.5 btn btn-sm checked:btn-secondary"
                  type="checkbox"
                  name="markets"
                  aria-label={market}
                  title={market}
                  value={value}
                />
              ))
            }
          </div>

          <input
            type="hidden"
            name="access_token"
            value={session?.spotifyAccessToken}
          />

          <button type="submit" class="btn btn-primary mt-4">Search</button>
        </fieldset>
      </form>
    </main>
  </div>

  <script>
    import Spotify from "@lib/spotify.js";

    window.searchPlaylists = (event) => {
      const formData = new FormData(event.target);

      const accessToken = formData.get("access_token");
      const keyword = formData.get("keyword");
      const selectedMarkets = formData.getAll("markets");

      if (
        accessToken?.trim().length &&
        keyword?.trim().length &&
        selectedMarkets.length
      ) {
        Spotify.searchPlaylists(accessToken, keyword, selectedMarkets[0]).then(
          (playlists) => {
            downloadPlaylistsAsCSV(playlists, keyword, selectedMarkets[0]);
          }
        );
      }
    };

    function downloadPlaylistsAsCSV(playlists, keyword, market) {
      if (!playlists || playlists.length === 0) {
        alert("Nessuna playlist trovata");
        return;
      }

      const headers = [
        "Keyword",
        "Market",
        "Name",
        "Spotify ID",
        "Owner Spotify ID",
        "Position",
      ];

      const csvContent = [
        headers.join(","),
        ...playlists
          .map((playlist, position) =>
            playlist
              ? {
                  ...playlist,
                  position: position + 1,
                }
              : null
          )
          .filter((playlist) => playlist)
          .map((playlist) =>
            [
              `"${keyword.replace(/"/g, '""')}"`,
              `"${market.replace(/"/g, '""')}"`,
              `"${playlist.name || ""}"`,
              `"${playlist.id || ""}"`,
              `"${(playlist.owner?.id || "").replace(/"/g, '""')}"`,
              `"${playlist.position || ""}"`,
            ].join(",")
          ),
      ].join("\n");

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const link = document.createElement("a");

      if (link.download !== undefined) {
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute(
          "download",
          `playlists_${keyword}_${new Date().toISOString().split("T")[0]}.csv`
        );
        link.style.visibility = "hidden";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
      }
    }
  </script>
</Layout>
